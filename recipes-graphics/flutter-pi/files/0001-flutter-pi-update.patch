diff --git a/src/flutter-pi.c b/src/flutter-pi.c
index 69c8bdc..f91eefa 100644
--- a/src/flutter-pi.c
+++ b/src/flutter-pi.c
@@ -132,7 +132,7 @@ EXAMPLES:\n\
   flutter-pi --release ~/hello_world_app\n\
   flutter-pi -o portrait_up ./my_app\n\
   flutter-pi -r 90 ./my_app\n\
-  flutter-pi -d \"155, 86\" ./my_app\n\
+  flutter-pi -d \"150, 75\" ./my_app\n\
   flutter-pi -i \"/dev/input/event{0,1}\" -i \"/dev/input/event{2,3}\" /home/pi/helloworld_flutterassets\n\
   flutter-pi -i \"/dev/input/mouse*\" /home/pi/helloworld_flutterassets\n\
 \n\
@@ -1418,8 +1418,8 @@ static int init_display(void) {
                 {
                     // if it's connected via DSI, and the width & height are 0,
                     //   it's probably the official 7 inch touchscreen.
-                    flutterpi.display.width_mm = 155;
-                    flutterpi.display.height_mm = 86;
+                    flutterpi.display.width_mm = 150;
+                    flutterpi.display.height_mm = 75;
                 } else if ((connector->connector->mmHeight % 10 == 0) &&
                             (connector->connector->mmWidth % 10 == 0)) {
                     // don't change anything.
@@ -1845,17 +1845,17 @@ static int init_application(void) {
 
     if (libflutter_engine_handle == NULL) {
         if (flutterpi.flutter.runtime_mode == kRelease) {
-            libflutter_engine_handle = dlopen("libflutter_engine.so.release", RTLD_LOCAL | RTLD_NOW);
+            libflutter_engine_handle = dlopen("libflutter_engine.so", RTLD_LOCAL | RTLD_NOW);
             if (libflutter_engine_handle == NULL) {
                 LOG_ERROR("Warning: Could not load libflutter_engine.so.release. dlopen: %s. Trying to open libflutter_engine.so...\n", dlerror());
             }
         } else if (flutterpi.flutter.runtime_mode == kProfile) {
-            libflutter_engine_handle = dlopen("libflutter_engine.so.profile", RTLD_LOCAL | RTLD_NOW);
+            libflutter_engine_handle = dlopen("libflutter_engine.so", RTLD_LOCAL | RTLD_NOW);
             if (libflutter_engine_handle == NULL) {
                 LOG_ERROR("Warning: Could not load libflutter_engine.so.profile. dlopen: %s. Trying to open libflutter_engine.so...\n", dlerror());
             }
         } else if (flutterpi.flutter.runtime_mode == kDebug) {
-            libflutter_engine_handle = dlopen("libflutter_engine.so.debug", RTLD_LOCAL | RTLD_NOW);
+            libflutter_engine_handle = dlopen("libflutter_engine.so", RTLD_LOCAL | RTLD_NOW);
             if (libflutter_engine_handle == NULL) {
                 LOG_ERROR("Warning: Could not load libflutter_engine.so.debug. dlopen: %s. Trying to open libflutter_engine.so...\n", dlerror());
             }
@@ -2305,7 +2305,7 @@ static bool setup_paths(void) {
     }
 
     asprintf(&kernel_blob_path, "%s/kernel_blob.bin", flutterpi.flutter.asset_bundle_path);
-    asprintf(&app_elf_path, "%s/app.so", flutterpi.flutter.asset_bundle_path);
+    asprintf(&app_elf_path, "%s/libapp.so", flutterpi.flutter.asset_bundle_path);
 
     if (flutterpi.flutter.runtime_mode == kDebug) {
         if (!PATH_EXISTS(kernel_blob_path)) {
@@ -2314,14 +2314,14 @@ static bool setup_paths(void) {
         }
     } else if ((flutterpi.flutter.runtime_mode == kRelease) || (flutterpi.flutter.runtime_mode == kProfile)) {
         if (!PATH_EXISTS(app_elf_path)) {
-            LOG_ERROR("Could not find \"app.so\" file inside \"%s\", which is required for release and profile mode.\n", flutterpi.flutter.asset_bundle_path);
+            LOG_ERROR("Could not find \"libapp.so\" file inside \"%s\", which is required for release and profile mode.\n", flutterpi.flutter.asset_bundle_path);
             return false;
         }
     }
 
-    asprintf(&icu_data_path, "/usr/lib/icudtl.dat");
+    asprintf(&icu_data_path, "/usr/share/flutter/icudtl.dat");
     if (!PATH_EXISTS(icu_data_path)) {
-        LOG_ERROR("Could not find \"icudtl.dat\" file inside \"/usr/lib/\".\n");
+        LOG_ERROR("Could not find \"icudtl.dat\" file inside \"/usr/share/flutter/\".\n");
         return false;
     }
 